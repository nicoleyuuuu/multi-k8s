sudo: required
dist: focal
services:
  - docker

env:
  global:
    - SHA=$(git rev-parse HEAD)
    # tell google cloud cli to make sure it's not displaying any prompt that requires user input
    - CLOUDSDK_CORE_DISABLE_PROMPT=1

before_install:
  - openssl aes-256-cbc -K $encrypted_9f3b5599b056_key -iv $encrypted_9f3b5599b056_iv -in service-account.json.enc -out service-account.json -d
  # download google dsk, install it locally in an instance that is assigned to us by travis CI
  - curl https://sdk.cloud.google.com | bash > /dev/null;
  # - curl -sSL https://dl.google.com/dl/cloudsdk/channels/rapid/downloads/google-cloud-sdk-468.0.0-linux-x86_64.tar.gz | tar -xz
  # - ./google-cloud-sdk/install.sh --quiet
  # look at the default install dir of the google cloud sdk, and source the file path bash inc
  # it basically means, there is some config that are going to modify our shell within travis CI inside this file
  # and it's going to apply the config through the source command
  - source $HOME/google-cloud-sdk/path.bash.inc
  - gcloud components update kubectl 
  # in order to access gc
  # ask google to activate a service account, and provide the credentials in service-account.json
  # step1: download the service account credential in a json file
  # step2: download and install travis CLI
  # step3: encrypt and upload the json file to travis account
  # step4: in the travis.yml, add code to unencrpt the json file and load it to GC SDK
  - gcloud auth activate-service-account --key-file service-account.json
  # tell what project, cluster and in what zone we want to use
  - gcloud config set project multi-k8s-466705
  - gcloud config set compute/zone northamerica-northeast2-a
  - gcloud container clusters get-credentials multi-cluster
  - echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
  # build the test version of multi-client
  - docker build -t yingtingyu33/react-test -f ./client/Docker.dev ./client

script:
  # run test
  - docker run -e CI=true yingtingyu33/react-test npm test

deploy: 
  # run the script file, since the deployment code will be in the script file
  provider: script 
  # in the script, we are going to have commands to build and tag the images and push it to docker hub
  # apply all config in the k8s folder
  # imperatively set latest images on each deployment
  script: bash ./deploy.sh
  on:
    branch: master